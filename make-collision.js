const cave = require('cave-automata-2d')
const ndarray = require('ndarray')

const MAP_WIDTH = 20
const MAP_HEIGHT = 15

const grid = ndarray(new Array(MAP_WIDTH * MAP_HEIGHT), [MAP_WIDTH, MAP_HEIGHT])

cave(grid, {
  border: 1,
  density: 0.5,
  fill: true
})(5)

for (let x = 0; x < MAP_WIDTH; ++x) {
  grid.set(x, 0, 1)
  grid.set(x, MAP_HEIGHT - 1, 1)
}

for (let y = 1; y < MAP_HEIGHT - 1; ++y) {
  grid.set(0, y, 1)
  grid.set(MAP_WIDTH - 1, y, 1)
}

process.stdout.write('/*\n')
process.stdout.write('Autogenerated; do NOT edit!\n')
process.stdout.write('\n')

for (let y = 0; y < MAP_HEIGHT; ++y) {
  for (let x = 0; x < MAP_WIDTH; ++x) {
    process.stdout.write(['@', '.'][grid.get(x, y)])
  }
  process.stdout.write('\n')
}

process.stdout.write('\n')
process.stdout.write('*/\n')

process.stdout.write('const collision = [\n')

for (let y = 0; y < MAP_HEIGHT; ++y) {
  process.stdout.write('  ')
  for (let x = 0; x < MAP_WIDTH; ++x) {
    process.stdout.write(grid.get(x, y) + '')

    if (!(x === MAP_WIDTH - 1 && y === MAP_HEIGHT - 1)) {
      process.stdout.write(',')
    }

    if (x < MAP_WIDTH - 1) {
      process.stdout.write(' ')
    }
  }
  process.stdout.write('\n')
}

process.stdout.write(']\n')

process.stdout.write('\n')

process.stdout.write('export {\n')
process.stdout.write('  collision\n')
process.stdout.end('}\n')
